[metadata]
name = hyde-images
description = Hyperspectral Denoising algorithm toolbox in Python
version = 0.4.3
author = Helmholtz-AI-Energy
author_email = consultant-helmholtz.ai@kit.edu
license = BSD-3-Clause
long_description = file: README.md
long_description_content_type = text/markdown; charset=UTF-8; variant=GFM
url = https://github.com/Helmholtz-AI-Energy/HyDe
# Add here related links, for example:
project_urls =
#     Documentation = https://pyscaffold.org/
    Source = https://github.com/Helmholtz-AI-Energy/HyDe
    Changelog = https://github.com/Helmholtz-AI-Energy/HyDe/blob/main/CHANGELOG.md

# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = any

# Add here all kinds of additional classifiers as defined under
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
requires_python = >= 3.6
classifiers =
    Development Status :: 4 - Beta
    License :: OSI Approved :: BSD License
    Programming Language :: Python
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.9
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.6
    Intended Audience :: Science/Research
    Topic :: Scientific/Engineering

[options]
zip_safe = False
packages = find_namespace:
include_package_data = True
package_dir =
    =src

# Add here dependencies of your project (line-separated), e.g. requests>=2.2,<3.0.
# Version specifiers like >=2.2,<3.0 avoid problems due to API changes in
# new major versions. This works if the required packages follow Semantic Versioning.
# For more information, check out https://semver.org/.
install_requires =
    importlib-metadata; python_version<"3.8"
    numpy>=1.13.0
    torch>=1.8.0
;    pytorch-wavelets>=1.3.0
    PyWavelets>=1.1.1

[options.packages.find]
where = src
exclude =
    tests
    pretrained-models

[options.extras_require]
# Add here additional requirements for extra features, to install with:
# `pip install hyde[PDF]` like:
# PDF = ReportLab; RXP

# Add here test requirements (semicolon/line-separated)
testing =
    setuptools
    pytest
    pytest-cov

[options.entry_points]
# Add here console scripts like:
# console_scripts =
#     script_name = hyde.module:function
# For example:
# console_scripts =
#     fibonacci = hyde.skeleton:run
# And any other entry points, for example:
# pyscaffold.cli =
#     awesome = pyscaffoldext.awesome.extension:AwesomeExtension

[tool:pytest]
# Specify command line options as you would do when invoking pytest directly.
# e.g. --cov-report html (or xml) for html/xml output or --junitxml junit.xml
# in order to write a coverage file that can be read by Jenkins.
# CAUTION: --cov flags may prohibit setting breakpoints while debugging.
#          Comment those flags to avoid this py.test issue.
addopts =
    --cov hyde --cov-report term-missing
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests
# Use pytest markers to select/deselect specific tests
# markers =
#     slow: mark tests as slow (deselect with '-m "not slow"')
#     system: mark end-to-end system tests

[bdist_wheel]
# Use this option if your package is pure-python
universal = 1

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no_vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
max_line_length = 100
ignore = E203, E402, W503, E501, F401, F403, W605
# ^  Black-compatible
#    E203 and W503 have edge cases handled by black
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py

[pycodestyle]
max-line-length = 100
ignore = E203, E402, W503

[pydocstyle]
add-select = D417
add-ignore = D105, D107, D200, D203, D205, D212, D301, D400, D401, D402, D410, D415

[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 4.0.1
package = hyde
extensions =
    dsproject
    no_skeleton
    pre_commit
